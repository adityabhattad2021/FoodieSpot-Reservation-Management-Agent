services:
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=foodiespot_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d foodiespot_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8000:80"
    volumes:
      - ./backend/app:/code/app
      - /code/__pycache__
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/foodiespot_db
      - SECRET_KEY=${SECRET_KEY}
      - BACKEND_API_KEY=${BACKEND_API_KEY}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - ALGORITHM=${ALGORITHM}
    env_file: 
      - .env
    depends_on:
      - db
    networks:
      - app-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 80 --reload

  agents:
    build:
      context: ./agents
      dockerfile: Dockerfile.dev
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - BACKEND_API_KEY=${BACKEND_API_KEY}
      - API_BASE_URL=http://backend:80
      - DEFAULT_MODEL=llama-3.1-8b-instant
    env_file:
      - .env
    depends_on:
      - backend
    ports:
      - "8001:80"
    volumes:
      - ./agents/app:/code/app
      - /code/__pycache__
    networks:
      - app-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 80 --reload

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        - VITE_CHAT_URL=http://localhost:8001
        - VITE_BACKEND_URL=http://localhost:8000
    ports:
      - "3000:3000"
    environment:
      - VITE_CHAT_URL=http://localhost:8001
      - VITE_BACKEND_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules 
    depends_on:
      - backend
      - agents
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
